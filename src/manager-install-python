#! /bin/sh

set -e
here=$(readlink -f "$0" | xargs dirname)
name=$(readlink -f "$0" | xargs basename)
alias manager="sh ${here}/manager"


# Parse arguments.
if [ $# -ne 1 ]; then
    echo "E: The ${name} command takes one argument"
    exit 1
fi

version="$1"
case ${version} in
    2.6|\
    2.6.[0-9]|\
    2.7.[0-9]|2.7.1[0-2])
        version_openssl=1.0.2
        export GET_PIP_URL=http://molinav.net/hub/python/get-pip-pyopenssl.py
    ;;
    2.7|\
    2.7.1[3-8])
        version_openssl=1.1.1
        export GET_PIP_URL=
    ;;
    3.[1-4]|\
    3.1.[0-5]|\
    3.2.[0-6]|\
    3.3.[0-7]|\
    3.4.[0-9]|3.4.10|\
    3.5.[0-2])
        version_openssl=1.0.2
        export GET_PIP_URL=
    ;;
    3.[5-9]|\
    3.5.[3-9]|3.5.10|\
    3.6.[0-9]|3.6.1[0-4]|\
    3.7.[0-9]|3.7.1[0-1]|\
    3.8.[0-9]|3.8.1[0-1]|\
    3.9.[0-6])
        version_openssl=1.1.1
        export GET_PIP_URL=
    ;;
    *)
        echo "E: unsupported Python version: '${version}'"
        exit 1
    ;;
esac
custom_pip=$(test -z "${GET_PIP_URL}" && echo 0 || echo 1)
package_openssl=openssl-${version_openssl}

# Install PyEnv if not present.
pyenv_profile="$(manager info pyenv-profile)"
if [ ! -d $(manager info pyenv-root) ]; then
    manager install pyenv
fi

# Ensure PyEnv is enabled.
if [ ! -x "$(command -v pyenv || true)" ]; then
    . "$(manager info pyenv-profile)"
fi

# Infer complete Python version if the user only gave major + minor.
case ${version} in
    2.[67]|3.[1-9])
        regex=$(echo "^\ \ ${version}.[0-9]\+$" | sed 's|\.|\\\.|g')
        version=$(pyenv install -l | grep "${regex}" | tail -n1 | xargs)
    ;;
esac

# Install OpenSSL if not present.
delete_openssl=0
if [ ! -d $(manager info openssl-root ${version_openssl}) ]; then
    delete_openssl=1
    manager install ${package_openssl}
fi

# Install `libffi` manually for Python 3.6 or greater.
case ${version} in
    3.[6-9].*)
        manager install libffi
    ;;
esac

# Fix possible bug in libc6 headers that prevents `socket` from being built.
socketfile=/usr/include/bits/socket.h
if [ -f ${socketfile} ]; then
    line1=
    line2=
    if [ -z "$(grep '^#define.PF_CAN.*' ${socketfile})" ]; then
        line1='#define PF_CAN          29      \/\* Controller Area Network \*\/'
        sed -i "/^#define.PF_WANPIPE.*/a ${line1}" ${socketfile}
    fi
    if [ -z "$(grep '^#define.AF_CAN.*' ${socketfile})" ]; then
        line2='#define AF_CAN          PF_CAN'
        sed -i "/^#define.AF_WANPIPE.*/a ${line2}" ${socketfile}
    fi
    if [ ! -z "${line1}" -o ! -z "${line2}" ]; then
        echo "Patched ${socketfile}..."
    fi
fi

# Install a specific Python version.
manager enable ${package_openssl}
export CFLAGS="-I/usr/local/ssl/include"
export LDFLAGS="-L/usr/local/ssl/lib -L/usr/lib"
if [ "$(manager info os-arch)" = "amd64" ]; then
    # Include location of `ffi.h` explicitly.
    export CPPFLAGS="-I/usr/include/x86_64-linux-gnu"
fi
PATH="/usr/local/ssl/bin/openssl:${PATH}" pyenv install "${version}"
echo "pyenv shell ${version}" > /etc/profile.d/01-pyenv-shell.sh

# Remove Python byte-compiled files.
pydir="$(manager info pyenv-root)/versions/${version}"
find "${pydir}" -type f -name "*.pyc" | xargs rm -rf
find "${pydir}" -type f -name "*.pyo" | xargs rm -rf
find "${pydir}/lib" -type d -name "__pycache__" | xargs rm -rf

# Remove Python testing stuff.
find "${pydir}/lib" -type d -regex ".*/tests?" | xargs rm -rf
rm -rf ${pydir}/lib/*/lib-dynload/_test*.so
rm -rf ${pydir}/lib/*/lib-dynload/_ctypes_test*.so
rm -rf ${pydir}/lib/*/lib-dynload/_xxtestfuzz*.so

# Remove Python static stuff.
find "${pydir}/lib" -type f -name "libpython*.a" | xargs rm -rf

# Remove IDLE.
find "${pydir}/bin" -name "idle*" | xargs rm -rf
find "${pydir}/lib" -type d -name "idlelib" | xargs rm -rf
find "${pydir}/lib" -type d -name "turtledemo" | xargs rm -rf
rm -f ${pydir}/lib/*/turtle.py

# Remove temporary folders.
rm -rf /tmp/python-build*
rm -rf /tmp/python-patch*

# Remove OpenSSL if installed on the fly.
manager disable ${package_openssl}
if [ ${delete_openssl} -eq 1 ]; then
    manager remove ${package_openssl}
fi

# Enable the Python installation.
if [ -f /etc/profile.d/01-pyenv-shell.sh ]; then
    . /etc/profile.d/01-pyenv-shell.sh
fi

# Finish the installation.
case ${version} in
    3.1.*)
    ;;
    *)
        # Install latest `pip`.
        if [ ${custom_pip} -eq 0 ]; then
            manager install python-pip
        fi
        # Install latest `wheel`.
        manager install python-wheel
        # Install latest `setuptools`.
        case ${version} in
            3.2.*)
                # Uninstall it first in Python 3.2 because it comes broken.
                manager remove python-setuptools
            ;;
        esac
        manager install python-setuptools
    ;;
esac
