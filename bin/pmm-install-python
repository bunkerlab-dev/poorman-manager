#! /bin/sh
#
# Copyright (c) 2021-2022 Víctor Molina García
# MIT License
#


# Pre-configure.
set -e
here=$(readlink -f "$0" | xargs dirname)
name=$(readlink -f "$0" | xargs basename)
alias pmm="sh ${here}/pmm"


# Parse arguments.
if [ $# -ne 1 ]; then
    echo 1>&2 "E: The ${name} command takes one argument"
    exit 1
fi

# Guess if we have sudo.
if [ -x "$(command -v sudo || true)" ]; then
    sudocmd=sudo
    ${sudocmd} true
else
    sudocmd=
fi

# Overwrite OpenSSL version and GET_PIP_URL if required.
version=$(echo "$1" | cut -d'-' -f1)
unicode=$(echo "$1-" | cut -d'-' -f2)
case ${version} in
    2.6|\
    2.6.[0-9]|\
    2.7.[0-9]|2.7.1[0-2])
        version_openssl=1.0.2
        export GET_PIP_URL=http://pylegacy.org/hub/get-pip-pyopenssl.py
    ;;
    2.7|\
    2.7.1[3-8])
        version_openssl=1.1.1
        export GET_PIP_URL=
    ;;
    3.[1-4]|\
    3.1.[0-5]|\
    3.2.[0-6]|\
    3.3.[0-7]|\
    3.4.[0-9]|3.4.10|\
    3.5.[0-2])
        version_openssl=1.0.2
        export GET_PIP_URL=
    ;;
    3.[5-9]|3.1[0-1]|\
    3.5.[3-9]|3.5.10|\
    3.6.[0-9]|3.6.1[0-5]|\
    3.7.[0-9]|3.7.1[0-5]|\
    3.8.[0-9]|3.8.1[0-5]|\
    3.9.[0-9]|3.9.1[0-5]|\
    3.10.[0-8]|\
    3.11.0)
        version_openssl=1.1.1
        export GET_PIP_URL=
    ;;
    *)
        echo 1>&2 "E: unsupported Python version: '${version}'"
        exit 1
    ;;
esac
case ${unicode} in
    ucs[24])
        case ${version} in
            3.[12]|3.1.*|3.2.*)
                if [ "${unicode}" = "ucs4" ]; then
                    export PYTHON_CONFIGURE_OPTS="--with-wide-unicode"
                fi
            ;;
            *)
                export PYTHON_CONFIGURE_OPTS="--enable-unicode=${unicode}"
            ;;
        esac
    ;;
    *)
        if [ ! -z "${unicode}" ]; then
            echo 1>&2 "E: unsupported Python unicode configuration: '${unicode}'"
            exit 1
        fi
        case ${version} in
            3.[12]|3.1.*|3.2.*)
                export PYTHON_CONFIGURE_OPTS="--with-wide-unicode"
            ;;
        esac
    ;;
esac

# Install PyEnv if not present.
pyenv_profile="$(pmm info pyenv-profile)"
if [ ! -d $(pmm info pyenv-root) ]; then
    pmm install pyenv
fi

# Ensure PyEnv is enabled.
if [ ! -x "$(command -v pyenv || true)" ]; then
    . "$(pmm info pyenv-profile)"
fi

# Infer complete Python version if the user only gave major + minor.
case ${version} in
    2.[67]|3.[1-9]|3.1[0-1])
        regex=$(echo "^\ \ ${version}.[0-9]\+$" | sed 's|\.|\\\.|g')
        version=$(pyenv install -l | grep "${regex}" | tail -n1 | xargs)
    ;;
esac

# Define full version as complete Python version plus unicode flag if given.
fullversion="${version}"
if [ ! -z "${unicode}" ]; then
    fullversion="${fullversion}-${unicode}"
fi

# Install OpenSSL if not present.
delete_openssl=0
package_openssl=openssl-${version_openssl}
if [ ! -d $(pmm info openssl-root ${version_openssl}) ]; then
    delete_openssl=1
    pmm install ${package_openssl}
fi

# Install SQLite if not present.
delete_sqlite=0
if [ ! -d $(pmm info sqlite-root) ]; then
    delete_sqlite=1
    pmm install sqlite
fi
export CFLAGS="${CFLAGS} -I$(pmm info sqlite-root)/include"
export CPPFLAGS="${CPPFLAGS} -I$(pmm info sqlite-root)/include"
export LDFLAGS="${LDFLAGS} -L$(pmm info sqlite-root)/lib"
if [ "$(pmm system os-arch)" = "amd64" ]; then
    export LDFLAGS="${LDFLAGS} -L$(pmm info sqlite-root)/lib64"
fi

# Install `xz` manually for Python 3.3 or greater.
delete_xz=0
case ${version} in
    3.[3-9].*|3.1[0-1].*)
        if [ ! -d $(pmm info xz-utils-root) ]; then
            delete_xz=1
            pmm install xz-utils
        fi
        export CFLAGS="${CFLAGS} -I$(pmm info xz-utils-root)/include"
        export CPPFLAGS="${CPPFLAGS} -I$(pmm info xz-utils-root)/include"
        export LDFLAGS="${LDFLAGS} -L$(pmm info xz-utils-root)/lib"
        if [ "$(pmm system os-arch)" = "amd64" ]; then
            export LDFLAGS="${LDFLAGS} -L$(pmm info xz-utils-root)/lib64"
        fi
    ;;
esac

# Install `libffi` manually for Python 3.6 or greater.
delete_ffi=0
case ${version} in
    3.[6-9].*|3.1[0-1].*)
        if [ ! -d $(pmm info ffi-root) ]; then
            delete_ffi=1
            pmm install ffi
        fi
        export CPPFLAGS="${CPPFLAGS} -I$(pmm info ffi-root)/include"
        export LDFLAGS="${LDFLAGS} -L$(pmm info ffi-root)/lib"
        if [ "$(pmm system os-arch)" = "amd64" ]; then
            export LDFLAGS="${LDFLAGS} -L$(pmm info ffi-root)/lib64"
        fi
    ;;
esac

# Fix possible bug in libc6 headers that prevents `socket` from being built.
kernel_version=$(pmm system kernel-version)
case ${kernel_version} in
    2.6.[0-9]|2.6.1[0-9]|2.6.2[0-6])
        case ${version} in
            3.[0-3].*)
                pmm enable socket-can
            ;;
            3.[4-9].*)
                pmm disable socket-can
            ;;
        esac
    ;;
esac

# Symlink definition file if unicode flag is given.
pyenv_root="$(pmm info pyenv-root)"
pydir="${pyenv_root}/versions/${fullversion}"
defdir="${pyenv_root}/plugins/python-build/share/python-build"
if [ ! -f "${defdir}/${fullversion}" ]; then
    cp "${defdir}/${version}" "${defdir}/${fullversion}"
fi

# Create temporary build directory and set patches (from PyEnv and custom).
tmpdir="$(mktemp -d /tmp/pmm-install-python-XXXXXXXX)"
patchfile="${tmpdir}/python-${version}.patch"
patchfold="${defdir}/patches/${version}/Python-$(echo ${version} | sed 's|\(.*\)\.0$|\1|')"
touch "${patchfile}"
case ${version} in
    3.[1-2].*)
        # Patch segfault when building with GCC 10+ on amd64.
        if [ "$(pmm system os-arch)" = "amd64" ]; then
            {
                echo 'diff -r ../orig/Objects/obmalloc.c ./Objects/obmalloc.c'
                echo "--- ../orig/Objects/obmalloc.c  2012-04-09 23:25:37"
                echo "+++ ./Objects/obmalloc.c        2012-04-09 23:25:37"
                echo "@@ -127,9 +127,9 @@"
                echo "  *"
                echo "  * You shouldn't change this unless you know what you are doing."
                echo "  */"
                echo "-#define ALIGNMENT               8               /* must be 2^N */"
                echo "-#define ALIGNMENT_SHIFT         3"
                echo "+#define ALIGNMENT               16               /* must be 2^N */"
                echo "+#define ALIGNMENT_SHIFT         4"
                echo " #define ALIGNMENT_MASK          (ALIGNMENT - 1)"
                echo " "
                echo " /* Return the number of bytes in size class I, as a uint. */"
                echo " #define INDEX2SIZE(I) (((uint)(I) + 1) << ALIGNMENT_SHIFT)"
            } >> "${patchfile}"
        fi
        case ${version} in
            3.2.[01])
                # Patch build bug in `ossaudiodev`.
                {
                    echo "--- setup.py.orig  2010-12-28 10:51:43.000000000 +0100"
                    echo "+++ setup.py       2021-09-07 09:49:48.448565000 +0200"
                    echo "@@ -1352,8 +1352,7 @@"
                    echo "         # End multiprocessing"
                    echo " "
                    echo "         # Platform-specific libraries"
                    echo "-        if (platform in ('linux2', 'freebsd4', 'freebsd5', 'freebsd6',"
                    echo "-                        'freebsd7', 'freebsd8')"
                    echo "+        if (platform.startswith('linux') or platform.startswith('freebsd')"
                    echo '             or platform.startswith("gnukfreebsd")):'
                    echo "             exts.append( Extension('ossaudiodev', ['ossaudiodev.c']) )"
                    echo "         else:"
                } >> ${patchfile}
            ;;
            3.2.2)
                # Patch encoding error in `distutils`.
                {
                    echo '--- ../orig/Lib/distutils/dist.py  2011-09-03 18:16:40.000000000 +0200'
                    echo '+++ ./Lib/distutils/dist.py        2012-04-11 08:54:02.000000000 +0200'
                    echo '@@ -1010,11 +1010,9 @@'
                    echo '     def write_pkg_info(self, base_dir):'
                    echo '         """Write the PKG-INFO file into the release tree.'
                    echo '         """'
                    echo "-        pkg_info = open(os.path.join(base_dir, 'PKG-INFO'), 'w')"
                    echo '-        try:'
                    echo "+        with open(os.path.join(base_dir, 'PKG-INFO'), 'w',"
                    echo "+                  encoding='UTF-8') as pkg_info:"
                    echo '             self.write_pkg_file(pkg_info)'
                    echo '-        finally:'
                    echo '-            pkg_info.close()'
                    echo ' '
                    echo '     def write_pkg_file(self, file):'
                    echo '         """Write the PKG-INFO format data to a file object.'
                } >> ${patchfile}
            ;;
            3.2.3)
                {
                    echo '--- ../orig/Modules/_posixsubprocess.c'
                    echo '+++ ./Modules/_posixsubprocess.c'
                    echo '@@ -202,7 +207,18 @@'
                    echo '     int fd_dir_fd;'
                    echo '     if (start_fd >= end_fd)'
                    echo '         return;'
                    echo '-        fd_dir_fd = open(FD_DIR, O_RDONLY | O_CLOEXEC, 0);'
                    echo '+#ifdef O_CLOEXEC'
                    echo '+    fd_dir_fd = open(FD_DIR, O_RDONLY | O_CLOEXEC, 0);'
                    echo '+#else'
                    echo '+    fd_dir_fd = open(FD_DIR, O_RDONLY, 0);'
                    echo '+#ifdef FD_CLOEXEC'
                    echo '+    {'
                    echo '+        int old = fcntl(fd_dir_fd, F_GETFD);'
                    echo '+        if (old != -1)'
                    echo '+            fcntl(fd_dir_fd, F_SETFD, old | FD_CLOEXEC);'
                    echo '+    }'
                    echo '+#endif'
                    echo '+#endif'
                    echo '     if (fd_dir_fd == -1) {'
                    echo '         /* No way to get a list of open fds. */'
                    echo '         _close_fds_by_brute_force(start_fd, end_fd, py_fds_to_keep);'
                } >> ${patchfile}
            ;;
            3.2.4)
                # Patch build bug in `_sqlite` if using SQLite < 3.5.
                {
                    echo '--- ../orig/Modules/_sqlite/cursor.c  2013-04-06 09:38:43.000000000 +0200'
                    echo '+++ ./Modules/_sqlite/cursor.c        2013-05-15 18:33:53.000000000 +0200'
                    echo '@@ -716,7 +716,7 @@'
                    echo ' '
                    echo '         Py_DECREF(self->lastrowid);'
                    echo '         if (!multiple && statement_type == STATEMENT_INSERT) {'
                    echo '-            sqlite3_int64 lastrowid;'
                    echo '+            sqlite_int64 lastrowid;'
                    echo '             Py_BEGIN_ALLOW_THREADS'
                    echo '             lastrowid = sqlite3_last_insert_rowid(self->connection->db);'
                    echo '             Py_END_ALLOW_THREADS'
                    echo '--- ../orig/Modules/_sqlite/util.c  2013-04-06 09:38:43.000000000 +0200'
                    echo '+++ ./Modules/_sqlite/util.c        2013-05-15 18:33:53.000000000 +0200'
                    echo '@@ -111,7 +111,7 @@'
                    echo ' #endif'
                    echo ' '
                    echo ' PyObject *'
                    echo '-_pysqlite_long_from_int64(sqlite3_int64 value)'
                    echo '+_pysqlite_long_from_int64(sqlite_int64 value)'
                    echo ' {'
                    echo ' #ifdef HAVE_LONG_LONG'
                    echo ' # if SIZEOF_LONG_LONG < 8'
                    echo '@@ -135,7 +135,7 @@'
                    echo '     return PyLong_FromLong(value);'
                    echo ' }'
                    echo ' '
                    echo '-sqlite3_int64'
                    echo '+sqlite_int64'
                    echo ' _pysqlite_long_as_int64(PyObject * py_val)'
                    echo ' {'
                    echo '     int overflow;'
                    echo '@@ -158,8 +158,8 @@'
                    echo ' #endif'
                    echo '             return value;'
                    echo '     }'
                    echo '-    else if (sizeof(value) < sizeof(sqlite3_int64)) {'
                    echo '-        sqlite3_int64 int64val;'
                    echo '+    else if (sizeof(value) < sizeof(sqlite_int64)) {'
                    echo '+        sqlite_int64 int64val;'
                    echo '         if (_PyLong_AsByteArray((PyLongObject *)py_val,'
                    echo '                                 (unsigned char *)&int64val, sizeof(int64val),'
                    echo '                                 IS_LITTLE_ENDIAN, 1 /* signed */) >= 0) {'
                    echo '--- ../orig/Modules/_sqlite/util.h  2013-04-06 09:38:43.000000000 +0200'
                    echo '+++ ./Modules/_sqlite/util.h        2013-05-15 18:33:53.000000000 +0200'
                    echo '@@ -36,7 +36,7 @@'
                    echo '  */'
                    echo ' int _pysqlite_seterror(sqlite3* db, sqlite3_stmt* st);'
                    echo ' '
                    echo '-PyObject * _pysqlite_long_from_int64(sqlite3_int64 value);'
                    echo '-sqlite3_int64 _pysqlite_long_as_int64(PyObject * value);'
                    echo '+PyObject * _pysqlite_long_from_int64(sqlite_int64 value);'
                    echo '+sqlite_int64 _pysqlite_long_as_int64(PyObject * value);'
                    echo ' '
                    echo ' #endif'
                } >> "${patchfile}"
            ;;
            esac
        ;;
    3.[3-9].*|3.1[0-1].*)
        # Patch file for `_decimal` and old GNU GCC.
        {
            echo 'diff -r ../orig/Modules/_decimal/libmpdec/constants.c ./Modules/_decimal/libmpdec/constants.c'
            echo '--- ../orig/Modules/_decimal/libmpdec/constants.c  Mon 23 Aug 2021 20:33:10 CEST'
            echo '+++ ./Modules/_decimal/libmpdec/constants.c        Mon 23 Aug 2021 20:33:10 CEST'
            echo '@@ -71,6 +71,9 @@'
            echo '   };'
            echo ' '
            echo '   /* magic number for constant division by MPD_RADIX */'
            echo '+#if defined(__GNUC__) && (__GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 3))'
            echo '+ __attribute__((visibility("hidden")))'
            echo '+#endif'
            echo '   const mpd_uint_t mprime_rdx = 15581492618384294730ULL;'
            echo ' '
            echo ' #elif defined(CONFIG_32)'
            echo '    ;;'
        } >> "${patchfile}"
        case ${version} in
            3.3.*)
                # Patch segfault when building with GCC 10+ on amd64.
                if [ "$(pmm system os-arch)" = "amd64" ]; then
                    {
                        echo 'diff -r ../orig/Objects/obmalloc.c ./Objects/obmalloc.c'
                        echo "--- ../orig/Objects/obmalloc.c  2017-09-19 07:32:02"
                        echo "+++ ./Objects/obmalloc.c        2017-09-19 07:32:02"
                        echo "@@ -136,8 +136,8 @@"
                        echo "  *"
                        echo "  * You shouldn't change this unless you know what you are doing."
                        echo "  */"
                        echo "-#define ALIGNMENT               8               /* must be 2^N */"
                        echo "-#define ALIGNMENT_SHIFT         3"
                        echo "+#define ALIGNMENT               16               /* must be 2^N */"
                        echo "+#define ALIGNMENT_SHIFT         4"
                        echo " "
                        echo " /* Return the number of bytes in size class I, as a uint. */"
                        echo " #define INDEX2SIZE(I) (((uint)(I) + 1) << ALIGNMENT_SHIFT)"
                    } >> "${patchfile}"
                fi
            ;;
            3.11.*)
                # Reset default C standard to C99.
                {
                    echo 'diff -r ../orig/configure ./configure'
                    echo '--- ../orig/configure  2022-10-24 17:35:39'
                    echo '+++ ./configure        2022-10-24 17:35:39'
                    echo '@@ -8066,7 +8066,8 @@'
                    echo ' # tweak BASECFLAGS based on compiler and platform'
                    echo ' case $GCC in'
                    echo ' yes)'
                    echo '-    CFLAGS_NODIST="$CFLAGS_NODIST -std=c11"'
                    echo '+    CFLAGS_NODIST="$CFLAGS_NODIST -std=c99"'
                    echo '+    BASECFLAGS="$BASECFLAGS -D'"'"'_Static_assert(...)='"'"'"'
                    echo ' '
                    echo ' '
                    echo ' '
                    echo '@@ -24977,12 +24978,8 @@'
                    echo '         if test "$py_cv_module__sqlite3" != "n/a"; then :'
                    echo ' '
                    echo '     if test "$have_sqlite3" = "yes"; then :'
                    echo '-  if test "$have_supported_sqlite3" = "yes"; then :'
                    echo '   py_cv_module__sqlite3=yes'
                    echo ' else'
                    echo '-  py_cv_module__sqlite3=missing'
                    echo '-fi'
                    echo '-else'
                    echo '   py_cv_module__sqlite3=disabled'
                    echo ' fi'
                    echo ' '
                } >> "${patchfile}"
            ;;
        esac
    ;;
esac
if [ -d "${patchfold}" ]; then
    find "${patchfold}" -maxdepth 1 -type f | sort | xargs cat >> "${patchfile}"
fi

# Prepare environment variables before installing Python.
pmm enable ${package_openssl}
export TMPDIR="${tmpdir}"
export CFLAGS="${CFLAGS} -I/usr/local/ssl/include"
export LDFLAGS="${LDFLAGS} -L/usr/local/ssl/lib"

# Install the specific Python version.
PATH="/usr/local/ssl/bin/openssl:${PATH}"                  \
    pyenv install --patch "${fullversion}" < "${patchfile}"
cp ${tmpdir}/python-build.*.log "${pydir}/${fullversion}.log"
rm -rf ${tmpdir}

# Save Python shell setup to profile scripts.
echo "pyenv shell ${fullversion}" | ${sudocmd} tee /etc/profile.d/01-pyenv-shell.sh >/dev/null

# Remove Python byte-compiled files.
find "${pydir}" -type f -name "*.pyc" | xargs rm -rf
find "${pydir}" -type f -name "*.pyo" | xargs rm -rf
find "${pydir}/lib" -type d -name "__pycache__" | xargs rm -rf

# Remove Python testing stuff.
find "${pydir}/lib" -type d -regex ".*/tests?" | xargs rm -rf
rm -rf ${pydir}/lib/*/lib-dynload/_test*.so
rm -rf ${pydir}/lib/*/lib-dynload/_ctypes_test*.so
rm -rf ${pydir}/lib/*/lib-dynload/_xxtestfuzz*.so

# Remove Python static stuff.
find "${pydir}/lib" -type f -name "libpython*.a" | xargs rm -rf

# Remove IDLE.
find "${pydir}/bin" -name "idle*" | xargs rm -rf
find "${pydir}/lib" -type d -name "idlelib" | xargs rm -rf
find "${pydir}/lib" -type d -name "turtledemo" | xargs rm -rf
rm -f ${pydir}/lib/*/turtle.py

# Remove xz-utils if installed on the fly.
if [ ${delete_xz} -eq 1 ]; then
    pmm remove xz-utils
fi

# Remove ffi if installed on the fly.
if [ ${delete_ffi} -eq 1 ]; then
    pmm remove ffi
fi

# Remove SQLite if installed on the fly.
if [ ${delete_sqlite} -eq 1 ]; then
    pmm remove sqlite
fi

# Remove OpenSSL if installed on the fly.
pmm disable ${package_openssl}
if [ ${delete_openssl} -eq 1 ]; then
    pmm remove ${package_openssl}
fi

# Enable the Python installation.
if [ -f /etc/profile.d/01-pyenv-shell.sh ]; then
    . "$(pmm info pyenv-profile)"
    . /etc/profile.d/01-pyenv-shell.sh
fi

# Finish the installation.
case ${version} in
    3.1.*)
    ;;
    *)
        # Install latest `pip`.
        if [ -z "${GET_PIP_URL}" ]; then
            echo "Upgrading pip..."
            pmm install python-pip
        else
            # Do it again because sometimes PyEnv does not use `GET_PIP_URL`.
            echo "Installing custom pip..."
            cwd="$(pwd)"
            tmpdir="$(mktemp -d /tmp/pmm-install-pip-XXXXXXXX)"
            cd "${tmpdir}"
            wget -q "${GET_PIP_URL}"
            python "$(basename ${GET_PIP_URL})"
            cd "${cwd}"
            rm -rf "${tmpdir}"
        fi
        # Install latest `wheel`.
        pmm install python-wheel
        # Install latest `setuptools`.
        case ${version} in
            3.2.*)
                # Uninstall it first in Python 3.2 because it comes broken.
                pmm remove python-setuptools
            ;;
        esac
        pmm install python-setuptools
    ;;
esac
