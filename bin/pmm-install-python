#! /bin/sh
#
# Copyright (c) 2021 Víctor Molina García
# MIT License
#


# Pre-configure.
set -e
here=$(readlink -f "$0" | xargs dirname)
name=$(readlink -f "$0" | xargs basename)
alias pmm="sh ${here}/pmm"


# Parse arguments.
if [ $# -ne 1 ]; then
    echo 1>&2 "E: The ${name} command takes one argument"
    exit 1
fi

# Guess if we have sudo.
if [ -x "$(command -v sudo || true)" ]; then
    sudocmd=sudo
    ${sudocmd} true
else
    sudocmd=
fi

version=$(echo "$1" | cut -d'-' -f1)
unicode=$(echo "$1" | cut -sd'-' -f2)
case ${version} in
    2.6|\
    2.6.[0-9]|\
    2.7.[0-9]|2.7.1[0-2])
        version_openssl=1.0.2
        export GET_PIP_URL=http://molinav.net/hub/python/get-pip-pyopenssl.py
    ;;
    2.7|\
    2.7.1[3-8])
        version_openssl=1.1.1
        export GET_PIP_URL=
    ;;
    3.[1-4]|\
    3.1.[0-5]|\
    3.2.[0-6]|\
    3.3.[0-7]|\
    3.4.[0-9]|3.4.10|\
    3.5.[0-2])
        version_openssl=1.0.2
        export GET_PIP_URL=
    ;;
    3.[5-9]|\
    3.5.[3-9]|3.5.10|\
    3.6.[0-9]|3.6.1[0-4]|\
    3.7.[0-9]|3.7.1[0-1]|\
    3.8.[0-9]|3.8.1[0-1]|\
    3.9.[0-6])
        version_openssl=1.1.1
        export GET_PIP_URL=
    ;;
    *)
        echo 1>&2 "E: unsupported Python version: '${version}'"
        exit 1
    ;;
esac
case ${unicode} in
    ucs[24])
        export PYTHON_CONFIGURE_OPTS="--enable-unicode=${unicode}"
    ;;
    *)
        if [ ! -z "${unicode}" ]; then
            echo 1>&2 "E: unsupported Python unicode configuration: '${unicode}'"
            exit 1
        fi
    ;;
esac

# Install PyEnv if not present.
pyenv_profile="$(pmm info pyenv-profile)"
if [ ! -d $(pmm info pyenv-root) ]; then
    pmm install pyenv
fi

# Ensure PyEnv is enabled.
if [ ! -x "$(command -v pyenv || true)" ]; then
    . "$(pmm info pyenv-profile)"
fi

# Infer complete Python version if the user only gave major + minor.
case ${version} in
    2.[67]|3.[1-9])
        regex=$(echo "^\ \ ${version}.[0-9]\+$" | sed 's|\.|\\\.|g')
        version=$(pyenv install -l | grep "${regex}" | tail -n1 | xargs)
    ;;
esac

# Define full version as complete Python version plus unicode flag if given.
fullversion="${version}"
if [ ! -z "${unicode}" ]; then
    fullversion="${fullversion}-${unicode}"
fi

# Install OpenSSL if not present.
delete_openssl=0
package_openssl=openssl-${version_openssl}
if [ ! -d $(pmm info openssl-root ${version_openssl}) ]; then
    delete_openssl=1
    pmm install ${package_openssl}
fi

# Install `libffi` manually for Python 3.6 or greater.
case ${version} in
    3.[6-9].*)
        pmm install libffi
    ;;
esac

# Fix possible bug in libc6 headers that prevents `socket` from being built.
kernel_version=$(pmm system kernel-version)
case ${kernel_version} in
    2.6.[0-9]|2.6.1[0-9]|2.6.2[0-4])
        case ${version} in
            3.[0-3].*)
                pmm enable socket-can
            ;;
            3.[4-9].*)
                pmm disable socket-can
            ;;
        esac
    ;;
esac

# Symlink definition file if unicode flag is given.
pydir="$(pmm info pyenv-root)/versions/${fullversion}"
defdir="$(pmm info pyenv-root)/plugins/python-build/share/python-build"
if [ ! -f "${defdir}/${fullversion}" ]; then
    cp "${defdir}/${version}" "${defdir}/${fullversion}"
fi

# Create temporary build directory and set patches (from PyEnv and custom).
tmpdir="$(mktemp -d /tmp/pmm-install-python-XXXXXXXX)"
patchfile="${tmpdir}/_decimal.patch"
patchfold="$(pmm info pyenv-root)/plugins/python-build/share/python-build/patches/${version}/Python-${version}"
touch "${patchfile}"
case ${version} in
    # Patch file for `linuxaudiodev` and `ossaudiodev` and newer Linux kernel.
    2.6.*)
        patchline=
        case ${version} in
            2.6.0)     patchline=1308 ;;
            2.6.1)     patchline=1310 ;;
            2.6.[2-4]) patchline=1331 ;;
            2.6.5)     patchline=1339 ;;
            2.6.[6-9]) patchline=1443 ;;
        esac
        if [ ! -z "${patchline}" ]; then
            {
                echo "diff -r ../orig/setup.py ./setup.py"
                echo "--- ../orig/setup.py  2013-10-29 16:04:39.000000000 +0100"
                echo "+++ ./setup.py        2021-09-02 19:55:33.273226000 +0200"
                echo "@@ -${patchline},14 +${patchline},13 @@"
                echo " "
                echo " "
                echo "         # Platform-specific libraries"
                echo "-        if platform == 'linux2':"
                echo "+        if platform.startswith('linux'):"
                echo "             # Linux-specific modules"
                echo "             exts.append( Extension('linuxaudiodev', ['linuxaudiodev.c']) )"
                echo "         else:"
                echo "             missing.append('linuxaudiodev')"
                echo " "
                echo "-        if platform in ('linux2', 'freebsd4', 'freebsd5', 'freebsd6',"
                echo "-                        'freebsd7', 'freebsd8'):"
                echo "+        if platform.startswith('linux') or platform.startswith('freebsd'):"
                echo "             exts.append( Extension('ossaudiodev', ['ossaudiodev.c']) )"
                echo "         else:"
                echo "             missing.append('ossaudiodev')"
            } >> "${patchfile}"
        fi
    ;;
    # Patch file for `ossaudiodev` and newer Linux kernel.
    3.1.*)
        patchline=
        case ${version} in
            3.1.[01])  patchline=1203 ;;
            3.1.2)     patchline=1207 ;;
            3.1.3)     patchline=1321 ;;
            3.1.[45])  patchline=1344 ;;
        esac
        if [ ! -z "${patchline}" ]; then
            {
                echo "diff -r ../orig/setup.py ./setup.py"
                echo "--- ../orig/setup.py  2012-04-10 01:25:37.000000000 +0200"
                echo "+++ ./setup.py        2021-09-03 10:16:58.575042300 +0200"
                echo "@@ -1344,8 +1344,7 @@"
                echo "         # End multiprocessing"
                echo " "
                echo "         # Platform-specific libraries"
                echo "-        if platform in ('linux2', 'freebsd4', 'freebsd5', 'freebsd6',"
                echo "-                        'freebsd7', 'freebsd8'):"
                echo "+        if platform.startswith('linux') or platform.startswith('freebsd'):"
                echo "             exts.append( Extension('ossaudiodev', ['ossaudiodev.c']) )"
                echo "         else:"
                echo "             missing.append('ossaudiodev')"
            } >> "${patchfile}"
        fi
    ;;
    # Patch file for `_decimal` and old GNU GCC.
    3.[3-9].*)
        {
            echo 'diff -r ../orig/Modules/_decimal/libmpdec/constants.c ./Modules/_decimal/libmpdec/constants.c'
            echo '--- ../orig/Modules/_decimal/libmpdec/constants.c  Mon 23 Aug 2021 20:33:10 CEST'
            echo '+++ ./Modules/_decimal/libmpdec/constants.c        Mon 23 Aug 2021 20:33:10 CEST'
            echo '@@ -71,6 +71,9 @@'
            echo '   };'
            echo ' '
            echo '   /* magic number for constant division by MPD_RADIX */'
            echo '+#if defined(__GNUC__) && (__GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 3))'
            echo '+ __attribute__((visibility("hidden")))'
            echo '+#endif'
            echo '   const mpd_uint_t mprime_rdx = 15581492618384294730ULL;'
            echo ' '
            echo ' #elif defined(CONFIG_32)'
            echo '    ;;'
        } >> "${patchfile}"
    ;;
esac
if [ -d "${patchfold}" ]; then
    find "${patchfold}" -maxdepth 1 -type f | sort | xargs cat >> "${patchfile}"
fi

# Prepare environment variables before installing Python.
pmm enable ${package_openssl}
export TMPDIR="${tmpdir}"
export CFLAGS="-I/usr/local/ssl/include"
export LDFLAGS="-L/usr/local/ssl/lib -L/usr/lib"
if [ "$(pmm system os-arch)" = "amd64" ]; then
    # Include location of `ffi.h` explicitly.
    export CPPFLAGS="-I/usr/include/x86_64-linux-gnu"
fi

# Install the specific Python version.
PATH="/usr/local/ssl/bin/openssl:${PATH}"                  \
    pyenv install --patch "${fullversion}" < "${patchfile}"
cp ${tmpdir}/python-build.*.log "${pydir}/${fullversion}.log"
rm -rf ${tmpdir}

# Save Python shell setup to profile scripts.
echo "pyenv shell ${fullversion}" | ${sudocmd} tee /etc/profile.d/01-pyenv-shell.sh >/dev/null

# Remove Python byte-compiled files.
find "${pydir}" -type f -name "*.pyc" | xargs rm -rf
find "${pydir}" -type f -name "*.pyo" | xargs rm -rf
find "${pydir}/lib" -type d -name "__pycache__" | xargs rm -rf

# Remove Python testing stuff.
find "${pydir}/lib" -type d -regex ".*/tests?" | xargs rm -rf
rm -rf ${pydir}/lib/*/lib-dynload/_test*.so
rm -rf ${pydir}/lib/*/lib-dynload/_ctypes_test*.so
rm -rf ${pydir}/lib/*/lib-dynload/_xxtestfuzz*.so

# Remove Python static stuff.
find "${pydir}/lib" -type f -name "libpython*.a" | xargs rm -rf

# Remove IDLE.
find "${pydir}/bin" -name "idle*" | xargs rm -rf
find "${pydir}/lib" -type d -name "idlelib" | xargs rm -rf
find "${pydir}/lib" -type d -name "turtledemo" | xargs rm -rf
rm -f ${pydir}/lib/*/turtle.py

# Remove OpenSSL if installed on the fly.
pmm disable ${package_openssl}
if [ ${delete_openssl} -eq 1 ]; then
    pmm remove ${package_openssl}
fi

# Enable the Python installation.
if [ -f /etc/profile.d/01-pyenv-shell.sh ]; then
    . "$(pmm info pyenv-profile)"
    . /etc/profile.d/01-pyenv-shell.sh
fi

# Finish the installation.
case ${version} in
    3.1.*)
    ;;
    *)
        # Install latest `pip`.
        if [ -z "${GET_PIP_URL}" ]; then
            echo "Upgrading pip..."
            pmm install python-pip
        else
            # Do it again because sometimes PyEnv does not use `GET_PIP_URL`.
            echo "Installing custom pip..."
            cwd="$(pwd)"
            tmpdir="$(mktemp -d)"
            cd "${tmpdir}"
            wget -q "${GET_PIP_URL}"
            python "$(basename ${GET_PIP_URL})"
            cd "${cwd}"
            rm -rf "${tmpdir}"
        fi
        # Install latest `wheel`.
        pmm install python-wheel
        # Install latest `setuptools`.
        case ${version} in
            3.2.*)
                # Uninstall it first in Python 3.2 because it comes broken.
                pmm remove python-setuptools
            ;;
        esac
        pmm install python-setuptools
    ;;
esac
