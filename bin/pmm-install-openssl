#! /bin/sh
#
# Copyright (c) 2021-2022 Víctor Molina García
# MIT License
#


# Pre-configure.
set -e
here=$(readlink -f "$0" | xargs dirname)
name=$(readlink -f "$0" | xargs basename)
alias pmm="sh ${here}/pmm"


# Check number of arguments.
if [ $# -gt 1 ]; then
    echo "E: The ${name} command takes at maximum one argument"
    exit 1
fi

# Parse arguments.
version=1.1.1k
if [ ! -z "$1" ]; then
    version="$1"
fi
regex="1\.(0\.2[a-u]?|1\.1[a-k]?)"
if [ -z $(echo "${version}" | grep -E "^${regex}$" || true) ]; then
    echo "E: Invalid openssl version '$1'"
    exit 1
fi

# Define remote url and installation prefix.
remote="https://github.com/openssl/openssl/archive/refs/tags"
pkgname="OpenSSL_$(echo ${version} | tr '.' '_')"
pkgfile="${pkgname}.tar.gz"
prefix=$(pmm info openssl-root ${version})

# Raise an error if `g++` is missing.
if [ ! -x "$(command -v g++ || true)" ]; then
    echo "E: Missing g++ in system"
    exit 1
fi

# Install `make` if it is not available.
delete_make=0
if [ ! -x "$(command -v make || true)" ]; then
    delete_make=1
    echo "Installing make..."
    pmm install make 1>/dev/null 2>&1
fi

# Install a newer `perl` if needed.
delete_perl=0
perl_version="$(pmm system perl-version)"
perl_version_major="$(echo ${perl_version} | cut -d'.' -f1)"
perl_version_minor="$(echo ${perl_version} | cut -d'.' -f2)"
if [ -z $(echo "${version}" | grep -E "^1\.0\.2[a-u]?$" || true) ]; then
    if [ ${perl_version_major} -lt 5 -o ${perl_version_minor} -lt 10 ]; then
        if [ ! -d "$(pmm info perl-root)" ]; then
            delete_perl=1
            pmm install perl-5.34.0
        fi
        alias perl="$(pmm info perl-root)/bin/perl"
    fi
fi

# Create temporary workspace.
cwd="$(pwd)"
tmpdir="$(mktemp -d)"
tmplog="${tmpdir}/${pkgname}.log"
cd ${tmpdir}
echo "Creating temporary workspace in ${tmpdir}..."

# Proceed with the installation.
echo "Downloading OpenSSL ${version}..."
wget -q ${remote}/${pkgfile}

echo "Decompressing OpenSSL ${version}..."
mkdir -p "${pkgname}"
tar -xf ${pkgfile} -C "${pkgname}" --strip-components=1

# Find out the architecture without relying on the kernel.
arch=$(pmm system os-arch)
archopts=
if [ "${arch}" = "amd64" ]; then
    archopts="linux-generic64 -m64"
elif [ "${arch}" = "i386" -o "${arch}" = "i686" ]; then
    archopts="linux-generic32 -m32"
fi

# Now go to the config + make + make install.
echo "Configuring OpenSSL ${version} (arch: ${arch})..."
cd ${pkgname}
if [ ! -z "${archopts}" ]; then
    ./Configure                                                               \
        ${archopts}                                                           \
        --prefix=${prefix} --openssldir=${prefix}/ssl                         \
        -fPIC no-shared -Wa,--noexecstack 1>${tmplog} 2>&1
else
    ./config                                                                  \
        --prefix=${prefix} --openssldir=${prefix}/ssl                         \
        -fPIC no-shared -Wa,--noexecstack 1>${tmplog} 2>&1
fi

echo "Building OpenSSL ${version}..."
make -s 1>>${tmplog} 2>&1

echo "Installing OpenSSL ${version}..."
make -s install_sw 1>>${tmplog} 2>&1

echo "Linking CA certificates..."
if [ -d ${prefix}/ssl ]; then
    rm -rf ${prefix}/ssl/certs
    ln -s /etc/ssl/certs ${prefix}/ssl/certs
    if [ -f /etc/pki/tls/cert.pem ]; then
        ln -s /etc/pki/tls/cert.pem ${prefix}/ssl/cert.pem
    fi
fi

echo "Cleaning up..."
rm -rf ${tmpdir}
cd ${cwd}

# Remove `perl` if installed on the fly.
if [ ${delete_perl} -eq 1 ]; then
    unalias perl
    pmm remove perl-5.34.0
fi

# Remove `make` if installed on the fly.
if [ ${delete_make} -eq 1 ]; then
    pmm remove make
fi

echo "Done!"
