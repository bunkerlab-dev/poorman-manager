#! /bin/sh
#
# Copyright (c) 2021 Víctor Molina García
# MIT License
#


# Pre-configure.
set -e
here=$(readlink -f "$0" | xargs dirname)
alias pmm="sh ${here}/pmm"


# Ensure that the script does not receive arguments.
if [ $# -ne 0 ]; then
    echo 1>&2 "E: The ${name} command takes no arguments"
    exit 1
fi

# Ensure that PyEnv is available.
if [ ! -x "$(command -v pyenv || true)" ]; then
    if [ -f "$(pmm info pyenv-profile)" ]; then
        . "$(pmm info pyenv-profile)"
    fi
    if [ ! -x "$(command -v pyenv || true)" ]; then
        echo 1>&2 "E: PyEnv is not installed in your system"
        exit 1
    fi
fi
# Ensure that `pip` is available.
if [ ! -x "$(command -v pip || true)" ]; then
    if [ -f /etc/profile.d/01-pyenv-shell.sh ]; then
        . /etc/profile.d/01-pyenv-shell.sh
    fi
    if [ ! -x "$(command -v pip || true)" ]; then
        echo 1>&2 "E: pip is not installed in your system"
        exit 1
    fi
fi

# Define library version limit based on the Python version.
pyversion=$(python -V 2>&1 | cut -d' ' -f2 | cut -d'.' -f1,2)
case ${pyversion} in
    2.6|2.7|3.3|3.4)
        maxversion=3.0
    ;;
    3.2)
        maxversion=0.27
    ;;
    3.5|3.6|3.7|3.8|3.9)
        maxversion=3.1
    ;;
    *)
        echo 1>&2 "E: unsupported Python version: '${pyversion}'"
        exit 1
    ;;
esac

# Call `pip` and remove the cache afterwards.
pip_flags=
pip_major="$(pip -V | cut -d' ' -f2 | cut -d'.' -f1)"
if [ ${pip_major} -ge 6 ]; then
    pip_flags="--no-cache-dir"
fi
pip install ${pip_flags} "cython < ${maxversion}"
rm -rf ${HOME}/.cache/pip /tmp/pip-*

# Remove Python byte-compiled files.
pydir="$(pyenv prefix)"
find "${pydir}" -type f -name "*.pyc" | xargs rm -rf
find "${pydir}" -type f -name "*.pyo" | xargs rm -rf
find "${pydir}/lib" -type d -name "__pycache__" | xargs rm -rf

# Remove Python testing stuff.
find "${pydir}/lib" -type d -regex ".*/tests?" | xargs rm -rf
